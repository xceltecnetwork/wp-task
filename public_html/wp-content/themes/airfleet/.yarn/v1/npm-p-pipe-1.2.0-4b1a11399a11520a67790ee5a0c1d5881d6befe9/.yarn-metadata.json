{
  "manifest": {
    "name": "p-pipe",
    "version": "1.2.0",
    "description": "Compose promise-returning & async functions into a reusable pipeline",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/p-pipe.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "test": "xo && ava"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "promise",
      "pipe",
      "pipeline",
      "compose",
      "composition",
      "combine",
      "flow",
      "serial",
      "functions",
      "reusable",
      "async",
      "await",
      "promises",
      "bluebird"
    ],
    "devDependencies": {
      "ava": "*",
      "xo": "*"
    },
    "_registry": "npm",
    "_loc": ".yarn/v1/npm-p-pipe-1.2.0-4b1a11399a11520a67790ee5a0c1d5881d6befe9/package.json",
    "readmeFilename": "readme.md",
    "readme": "# p-pipe [![Build Status](https://travis-ci.org/sindresorhus/p-pipe.svg?branch=master)](https://travis-ci.org/sindresorhus/p-pipe)\n\n> Compose promise-returning & async functions into a reusable pipeline\n\n\n## Install\n\n```\n$ npm install p-pipe\n```\n\n\n## Usage\n\n```js\nconst pPipe = require('p-pipe');\n\nconst addUnicorn = str => Promise.resolve(`${str} Unicorn`);\nconst addRainbow = str => Promise.resolve(`${str} Rainbow`);\n\nconst pipeline = pPipe(addUnicorn, addRainbow);\n\npipeline('❤️').then(console.log);\n//=> '❤️ Unicorn Rainbow'\n```\n\n\n## API\n\n### pPipe(input, …)\n\nThe `input` functions are applied from left to right.\n\nYou can also specify an array as the first argument instead of multiple function arguments. Mostly only useful if you have to support Node.js 4. With Node.js 6 and above you can just use spread syntax.\n\n#### input\n\nType: `Function`\n\nExpected to return a `Promise` or any value.\n\n\n## Related\n\n- [p-each-series](https://github.com/sindresorhus/p-each-series) - Iterate over promises serially\n- [p-series](https://github.com/sindresorhus/p-series) - Run promise-returning & async functions in series\n- [p-waterfall](https://github.com/sindresorhus/p-waterfall) - Run promise-returning & async functions in series, each passing its result to the next\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/p-pipe/-/p-pipe-1.2.0.tgz#4b1a11399a11520a67790ee5a0c1d5881d6befe9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/p-pipe/-/p-pipe-1.2.0.tgz",
    "hash": "4b1a11399a11520a67790ee5a0c1d5881d6befe9",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "4b1a11399a11520a67790ee5a0c1d5881d6befe9"
}