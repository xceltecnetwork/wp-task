{
  "manifest": {
    "name": "imagemin-mozjpeg",
    "version": "8.0.0",
    "description": "Imagemin plugin for mozjpeg",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/imagemin/imagemin-mozjpeg.git"
    },
    "author": {
      "name": "Kevin Mårtensson",
      "email": "kevinmartensson@gmail.com",
      "url": "github.com/kevva"
    },
    "maintainers": [
      {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      {
        "name": "Shinnosuke Watanabe",
        "url": "github.com/shinnn"
      }
    ],
    "engines": {
      "node": ">=6"
    },
    "scripts": {
      "test": "xo && ava"
    },
    "files": [
      "index.js"
    ],
    "keywords": [
      "compress",
      "image",
      "imageminplugin",
      "img",
      "jpeg",
      "jpg",
      "minify",
      "mozjpeg",
      "optimize"
    ],
    "dependencies": {
      "execa": "^1.0.0",
      "is-jpg": "^2.0.0",
      "mozjpeg": "^6.0.0"
    },
    "devDependencies": {
      "ava": "*",
      "is-progressive": "^3.0.0",
      "pify": "^4.0.0",
      "xo": "*"
    },
    "_registry": "npm",
    "_loc": ".yarn/v1/npm-imagemin-mozjpeg-8.0.0-d2ca4e8c982c7c6eda55069af89dee4c1cebcdfd/package.json",
    "readmeFilename": "readme.md",
    "readme": "# imagemin-mozjpeg [![Build Status](https://travis-ci.org/imagemin/imagemin-mozjpeg.svg?branch=master)](https://travis-ci.org/imagemin/imagemin-mozjpeg) [![Build status](https://ci.appveyor.com/api/projects/status/uuh7yi48erf4ykyo?svg=true)](https://ci.appveyor.com/project/ShinnosukeWatanabe/imagemin-mozjpeg)\n\n> [Imagemin](https://github.com/imagemin/imagemin) plugin for [mozjpeg](https://github.com/mozilla/mozjpeg)\n\n\n## Install\n\n```\n$ npm install imagemin-mozjpeg\n```\n\n\n## Usage\n\n```js\nconst imagemin = require('imagemin');\nconst imageminMozjpeg = require('imagemin-mozjpeg');\n\n(async () => {\n\tawait imagemin(['images/*.jpg'], 'build/images', {\n\t\tuse: [\n\t\t\timageminMozjpeg()\n\t\t]\n\t});\n\n\tconsole.log('Images optimized');\n})();\n```\n\n\n## API\n\n### imageminMozjpeg([options])(buffer)\n\nReturns a `Promise<Buffer>`.\n\n#### options\n\n##### quality\n\nType: `number`\n\nCompression quality, in range `0` (worst) to `100` (perfect).\n\n##### progressive\n\nType: `boolean`<br>\nDefault: `true`\n\n`false` creates baseline JPEG file.\n\n##### targa\n\nType: `boolean`<br>\nDefault: `false`\n\nInput file is Targa format (usually not needed).\n\n##### revert\n\nType: `boolean`<br>\nDefault: `false`\n\nRevert to standard defaults instead of mozjpeg defaults.\n\n##### fastCrush\n\nType: `boolean`<br>\nDefault: `false`\n\nDisable progressive scan optimization.\n\n##### dcScanOpt\n\nType: `number`<br>\nDefault: `1`\n\nSet DC scan optimization mode.\n\n- `0` One scan for all components\n- `1` One scan per component\n- `2` Optimize between one scan for all components and one scan for 1st component plus one scan for remaining components\n\n##### trellis\n\nType: `boolean`<br>\nDefault: `true`\n\n[Trellis optimization](https://en.wikipedia.org/wiki/Trellis_quantization).\n\n##### trellisDC\n\nType: `boolean`<br>\nDefault: `true`\n\nTrellis optimization of DC coefficients.\n\n##### tune\n\nType: `string`<br>\nDefault: `hvs-psnr`\n\nSet Trellis optimization method. Available methods: `psnr`, `hvs-psnr`, `ssim`, `ms-ssim`\n\n##### overshoot\n\nType: `boolean`<br>\nDefault: `true`\n\nBlack-on-white deringing via overshoot.\n\n##### arithmetic\n\nType: `boolean`<br>\nDefault: `false`\n\nUse [arithmetic coding](https://en.wikipedia.org/wiki/Arithmetic_coding).\n\n##### dct\n\nType: `string`<br>\nDefault: `int`\n\nSet [DCT](https://en.wikipedia.org/wiki/Discrete_cosine_transform) method:\n\n- `int` Use integer DCT\n- `fast` Use fast integer DCT (less accurate)\n- `float` Use floating-point DCT\n\n##### quantBaseline\n\nType: `boolean`<br>\nDefault: `false`\n\nUse 8-bit quantization table entries for baseline JPEG compatibility.\n\n##### quantTable\n\nType: `number`\n\nUse predefined quantization table.\n\n- `0` JPEG Annex K\n- `1` Flat\n- `2` Custom, tuned for MS-SSIM\n- `3` ImageMagick table by N. Robidoux\n- `4` Custom, tuned for PSNR-HVS\n- `5` Table from paper by Klein, Silverstein and Carney\n\n##### smooth\n\nType: `number`\n\nSet the strength of smooth dithered input. (1...100)\n\n##### maxMemory\n\nType: `number`\n\nSet the maximum memory to use in kilobytes.\n\n##### sample\n\nType: `string[]`\n\nSet component sampling factors. Each item should be in the format `HxV`, for example `2x1`.\n\n#### buffer\n\nType: `buffer`\n\nBuffer to optimize.\n\n\n## License\n\nMIT © [Imagemin](https://github.com/imagemin)\n",
    "licenseText": "MIT License\n\nCopyright (c) Imagemin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/imagemin-mozjpeg/-/imagemin-mozjpeg-8.0.0.tgz#d2ca4e8c982c7c6eda55069af89dee4c1cebcdfd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/imagemin-mozjpeg/-/imagemin-mozjpeg-8.0.0.tgz",
    "hash": "d2ca4e8c982c7c6eda55069af89dee4c1cebcdfd",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "d2ca4e8c982c7c6eda55069af89dee4c1cebcdfd"
}