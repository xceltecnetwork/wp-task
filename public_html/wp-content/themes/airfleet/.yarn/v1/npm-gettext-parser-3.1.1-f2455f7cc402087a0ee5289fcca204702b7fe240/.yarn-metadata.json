{
  "manifest": {
    "name": "gettext-parser",
    "description": "Parse and compile gettext po and mo files to/from json, nothing more, nothing less",
    "version": "3.1.1",
    "author": {
      "name": "Andris Reinman"
    },
    "contributors": [
      {
        "name": "Sam Hauglustaine"
      }
    ],
    "homepage": "http://github.com/smhg/gettext-parser",
    "repository": {
      "type": "git",
      "url": "http://github.com/smhg/gettext-parser.git"
    },
    "scripts": {
      "lint": "eslint lib/*.js test/*.js index.js",
      "test": "mocha",
      "preversion": "npm run lint && npm test",
      "postversion": "git push && git push --tags"
    },
    "main": "./index",
    "license": "MIT",
    "dependencies": {
      "encoding": "^0.1.12",
      "readable-stream": "^3.2.0",
      "safe-buffer": "^5.1.2"
    },
    "devDependencies": {
      "chai": "^4.2.0",
      "eslint": "^5.15.1",
      "eslint-config-standard": "^12.0.0",
      "eslint-plugin-import": "^2.16.0",
      "eslint-plugin-node": "^8.0.1",
      "eslint-plugin-promise": "^4.0.1",
      "eslint-plugin-standard": "^4.0.0",
      "mocha": "^6.0.2"
    },
    "keywords": [
      "i18n",
      "l10n",
      "gettext",
      "mo",
      "po"
    ],
    "_registry": "npm",
    "_loc": ".yarn/v1/npm-gettext-parser-3.1.1-f2455f7cc402087a0ee5289fcca204702b7fe240/package.json",
    "readmeFilename": "README.md",
    "readme": "gettext-parser [![Build Status](https://secure.travis-ci.org/smhg/gettext-parser.png)](http://travis-ci.org/smhg/gettext-parser)\n==============\n\nParse and compile gettext *po* and *mo* files with node.js, nothing more, nothing less.\n\n> *Please note:* starting with version 3 only latest LTS and latest stable node versions are supported. **Use version 2 with older node versions.**\n\n## Usage\n\nInclude the library:\n\n    var gettextParser = require(\"gettext-parser\");\n\n\n### Parse PO files\n\nParse a PO file with\n\n    gettextParser.po.parse(input[, defaultCharset]) → Object\n\nWhere\n\n  * **input** is a *po* file as a Buffer or an unicode string. Charset is converted to unicode from other encodings only if the input is a Buffer, otherwise the charset information is discarded\n  * **defaultCharset** is the charset to use if charset is not defined or is the default `\"CHARSET\"` (applies only if *input* is a Buffer)\n\nMethod returns gettext-parser specific translation object (see below)\n\n**Example**\n\n```javascript\nvar input = require('fs').readFileSync('en.po');\nvar po = gettextParser.po.parse(input);\nconsole.log(po.translations['']); // output translations for the default context\n```\n\n### Parse PO as a Stream\n\nPO files can also be parsed from a stream source. After all input is processed the parser emits a single 'data' event which contains the parsed translation object.\n\n    gettextParser.po.createParseStream([defaultCharset][, streamOptions]) → Transform Stream\n\nWhere\n\n  * **defaultCharset** is the charset to use if charset is not defined or is the default `\"CHARSET\"`\n  * **streamOptions** are the standard stream options\n\n**Example**\n\n```javascript\nvar input = require('fs').createReadStream('en.po');\nvar po = gettextParser.po.createParseStream();\ninput.pipe(po);\npo.on('data', function(data){\n    console.log(data.translations['']); // output translations for the default context\n});\n```\n\n### Compile PO from a translation object\n\nIf you have a translation object you can convert this to a valid PO file with\n\n    gettextParser.po.compile(data[, options]) → Buffer\n\nWhere\n\n  * **data** is a translation object either got from parsing a PO/MO file or composed by other means\n  * **options** is a configuration object with possible values\n    * **foldLength** is the length at which to fold message strings into newlines (default: 76). Set to 0 or false to disable folding.\n    * **sort** (boolean|Function) - (default `false`) if `true`, entries will be sorted by msgid in the resulting .po(.pot) file.\n      If a comparator function is provided, that function will be used to sort entries in the output. The function is called with two arguments, each of which is a single message entry with the structure described below. The function should follow the standard rules for functions passed to `Array.sort()`: return `0` if the entries are interchangeable in sort order; return a number less than 0 if the first entry should come before the second one; and return a number greater than 0 if the second entry should come before the first one.\n\n**Example**\n\n```javascript\nvar data = {\n    ...\n};\nvar output = gettextParser.po.compile(data);\nrequire('fs').writeFileSync(output);\n```\n\n### Parse MO files\n\nParse a MO file with\n\n    gettextParser.mo.parse(input[, defaultCharset]) → Object\n\nWhere\n\n  * **input** is a *mo* file as a Buffer\n  * **defaultCharset** is the charset to use if charset is not defined or is the default `\"CHARSET\"`\n\nMethod returns gettext-parser specific translation object (see below)\n\n**Example**\n\n```javascript\nvar input = require('fs').readFileSync('en.mo');\nvar mo = gettextParser.mo.parse(input);\nconsole.log(mo.translations['']); // output translations for the default context\n```\n\n### Compile MO from a translation object\n\nIf you have a translation object you can convert this to a valid MO file with\n\n    gettextParser.mo.compile(data) → Buffer\n\nWhere\n\n  * **data** is a translation object either got from parsing a PO/MO file or composed by other means\n\n**Example**\n\n```javascript\nvar data = {\n    ...\n};\nvar output = gettextParser.mo.compile(data);\nrequire('fs').writeFileSync(output);\n```\n\n### Notes\n\n#### Overriding charset\n\nIf you are compiling a previously parsed translation object, you can override the output charset with the `charset` property (applies both for compiling *mo* and *po* files).\n\n```javascript\nvar obj = gettextParser.po.parse(inputBuf);\nobj.charset = \"windows-1257\";\noutputBuf = gettextParser.po.compile(obj);\n```\n\nHeaders for the output are modified to match the updated charset.\n\n#### ICONV support\n\nBy default *gettext-parser* uses pure JS [iconv-lite](https://github.com/ashtuchkin/iconv-lite) for encoding and decoding non UTF-8 charsets. If you need to support more complex encodings that are not supported by *iconv-lite*, you need to add [iconv](https://github.com/bnoordhuis/node-iconv) as an additional dependency for your project (*gettext-parser* will detect if it is available and tries to use it instead of *iconv-lite*).\n\n## Data structure of parsed mo/po files\n\n### Character set\n\nParsed data is always in unicode but the original charset of the file can\nbe found from the `charset` property. This value is also used when compiling translations\nto a *mo* or *po* file.\n\n### Headers\n\nHeaders can be found from the `headers` object, all keys are lowercase and the value for a key is a string. This value will also be used when compiling.\n\n### Translations\n\nTranslations can be found from the `translations` object which in turn holds context objects for `msgctxt`. Default context can be found from `translations[\"\"]`.\n\nContext objects include all the translations, where `msgid` value is the key. The value is an object with the following possible properties:\n\n  * **msgctxt** context for this translation, if not present the default context applies\n  * **msgid** string to be translated\n  * **msgid_plural** the plural form of the original string (might not be present)\n  * **msgstr** an array of translations\n  * **comments** an object with the following properties: `translator`, `reference`, `extracted`, `flag`, `previous`.\n\nExample\n\n```json\n{\n  \"charset\": \"iso-8859-1\",\n\n  \"headers\": {\n    \"content-type\": \"text/plain; charset=iso-8859-1\",\n    \"plural-forms\": \"nplurals=2; plural=(n!=1);\"\n  },\n\n  \"translations\": {\n    \"\": {\n      \"\": {\n        \"msgid\": \"\",\n        \"msgstr\": [\"Content-Type: text/plain; charset=iso-8859-1\\n...\"]\n      }\n    },\n    \"another context\": {\n      \"%s example\": {\n        \"msgctxt\": \"another context\",\n        \"msgid\": \"%s example\",\n        \"msgid_plural\": \"%s examples\",\n        \"msgstr\": [\"% näide\", \"%s näidet\"],\n        \"comments\": {\n          \"translator\": \"This is regular comment\",\n          \"reference\": \"/path/to/file:123\"\n        }\n      }\n    }\n  }\n}\n```\n\nNotice that the structure has both a `headers` object and a `\"\"` translation with the header string. When compiling the structure to a *mo* or a *po* file, the `headers` object is used to define the header. Header string in the `\"\"` translation is just for reference (includes the original unmodified data) but will not be used when compiling. So if you need to add or alter header values, use only the `headers` object.\n\nIf you need to convert *gettext-parser* formatted translation object to something else, eg. for *jed*, check out [po2json](https://github.com/mikeedwards/po2json).\n\n## License\n\n**MIT**\n",
    "licenseText": "Copyright (c) 2014-2015 Andris Reinman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gettext-parser/-/gettext-parser-3.1.1.tgz#f2455f7cc402087a0ee5289fcca204702b7fe240",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gettext-parser/-/gettext-parser-3.1.1.tgz",
    "hash": "f2455f7cc402087a0ee5289fcca204702b7fe240",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "f2455f7cc402087a0ee5289fcca204702b7fe240"
}