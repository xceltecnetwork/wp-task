{
  "manifest": {
    "name": "css-tree",
    "version": "1.0.0-alpha.28",
    "description": "CSSTree is a tool set to work with CSS, including fast detailed parser (string->AST), walker (AST traversal), generator (AST->string) and lexer (validation and matching) based on knowledge of spec and browser implementations",
    "keywords": [
      "css",
      "ast",
      "tokenizer",
      "parser",
      "walker",
      "lexer",
      "generator",
      "utils",
      "syntax",
      "validation"
    ],
    "homepage": "https://github.com/csstree/csstree",
    "author": {
      "name": "Roman Dvornov",
      "email": "rdvornov@gmail.com",
      "url": "https://github.com/lahmatiy"
    },
    "maintainers": [
      {
        "name": "Roman Dvornov",
        "email": "rdvornov@gmail.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/csstree/csstree.git"
    },
    "bugs": {
      "url": "https://github.com/csstree/csstree/issues"
    },
    "main": "./lib/index",
    "browser": {
      "./data": "./dist/default-syntax.json"
    },
    "eslintConfig": {
      "env": {
        "node": true,
        "mocha": true,
        "es6": true
      },
      "rules": {
        "no-duplicate-case": 2,
        "no-undef": 2,
        "no-unused-vars": [
          2,
          {
            "vars": "all",
            "args": "after-used"
          }
        ]
      }
    },
    "scripts": {
      "lint": "jscs data lib scripts test && eslint data lib scripts test && node scripts/update-docs --lint",
      "update:docs": "node scripts/update-docs",
      "build": "npm run gen:syntax && browserify --standalone csstree lib/index.js | uglifyjs --compress --mangle -o dist/csstree.js",
      "lint-and-test": "npm run lint && npm test",
      "test": "mocha --reporter progress",
      "gen:syntax": "node scripts/gen-syntax-data",
      "coverage": "istanbul cover _mocha -- -R min",
      "prepublish": "npm run build",
      "travis": "npm run lint-and-test && npm run coveralls",
      "coveralls": "istanbul cover _mocha --report lcovonly -- -R min && cat ./coverage/lcov.info | coveralls",
      "hydrogen": "node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/parse --stat -o /dev/null"
    },
    "dependencies": {
      "mdn-data": "~1.1.0",
      "source-map": "^0.5.3"
    },
    "devDependencies": {
      "browserify": "^13.0.0",
      "coveralls": "^2.11.6",
      "eslint": "^2.13.1",
      "istanbul": "^0.4.2",
      "jscs": "~3.0.7",
      "json-to-ast": "~2.0.1",
      "mocha": "^3.0.2",
      "uglify-js": "^2.6.1"
    },
    "engines": {
      "node": ">=0.10.0"
    },
    "files": [
      "bin",
      "data",
      "dist/csstree.js",
      "dist/default-syntax.json",
      "docs",
      "lib",
      "HISTORY.md",
      "LICENSE",
      "README.md"
    ],
    "_registry": "npm",
    "_loc": ".yarn/v1/npm-css-tree-1.0.0-alpha.28-8e8968190d886c9477bc8d61e96f61af3f7ffa7f/package.json",
    "readmeFilename": "README.md",
    "readme": "<img align=\"right\" width=\"111\" height=\"111\"\n     alt=\"CSSTree logo\"\n     src=\"https://cloud.githubusercontent.com/assets/270491/19243723/6f9136c6-8f21-11e6-82ac-eeeee4c6c452.png\"/>\n\n# CSSTree\n\n[![NPM version](https://img.shields.io/npm/v/css-tree.svg)](https://www.npmjs.com/package/css-tree)\n[![Build Status](https://travis-ci.org/csstree/csstree.svg?branch=master)](https://travis-ci.org/csstree/csstree)\n[![Coverage Status](https://coveralls.io/repos/github/csstree/csstree/badge.svg?branch=master)](https://coveralls.io/github/csstree/csstree?branch=master)\n[![Join the CSSTree chat at https://gitter.im/csstree/csstree](https://badges.gitter.im/csstree/csstree.svg)](https://gitter.im/csstree/csstree)\n[![Twitter](https://img.shields.io/badge/Twitter-@csstree-blue.svg)](https://twitter.com/csstree)\n\nCSSTree is a tool set to work with CSS, including [fast](https://github.com/postcss/benchmark) detailed parser (string->AST), walker (AST traversal), generator (AST->string) and lexer (validation and matching) based on knowledge of spec and browser implementations. The main goal is to be efficient and W3C spec compliant, with focus on CSS analyzing and source-to-source transforming tasks.\n\n> NOTE: The project is in alpha stage since some parts need further improvements, AST format and API are subjects to change. However it's stable enough and used by packages like [CSSO](https://github.com/css/csso) (CSS minifier) and [SVGO](https://github.com/svg/svgo) (SVG optimizer) in production.\n\n## Features\n\n- **Detailed parsing with an adjustable level of detail**\n\n  By default CSSTree parses CSS as detailed as possible, i.e. each single logical part is representing with its own AST node (see [AST format](docs/ast.md) for all possible node types). The parsing detail level can be changed through [parser options](docs/parsing.md#parsesource-options), for example, you can disable parsing of selectors or declarations for component parts.\n\n- **Tolerant to errors by design**\n\n  Parser behaves as [spec says](https://www.w3.org/TR/css-syntax-3/#error-handling): \"When errors occur in CSS, the parser attempts to recover gracefully, throwing away only the minimum amount of content before returning to parsing as normal\". The only thing the parser departs from the specification is that it doesn't throw away bad content, but wraps it in the special nodes, which allows processing it later.\n\n- **Fast and efficient**\n\n  CSSTree is created with focus on performance and effective memory consumption. Therefore it's [one of the fastest CSS parsers](https://github.com/postcss/benchmark) at the moment.\n\n- **Syntax validation**\n\n  The build-in lexer can test CSS against syntaxes defined by W3C. CSSTree uses [mdn/data](https://github.com/mdn/data/) as a basis for lexer's dictionaries and extends them with vendor specific and legacy syntaxes. Lexer can only check the declaration values currently, but this feature will be extended to other parts of the CSS in the future.\n\n## Docs\n\n- [Parsing CSS into AST](docs/parsing.md)\n- [AST format](docs/ast.md)\n- [Generate CSS from AST](docs/generate.md)\n- [AST traversal](docs/traversal.md)\n- [Utils to work with AST](docs/utils.md)\n\n## Tools\n\n* [AST Explorer](https://astexplorer.net/#/gist/244e2fb4da940df52bf0f4b94277db44/e79aff44611020b22cfd9708f3a99ce09b7d67a8) – explore CSSTree AST format with zero setup\n* [CSS syntax reference](https://csstree.github.io/docs/syntax.html)\n* [CSS syntax validator](https://csstree.github.io/docs/validator.html)\n\n## Related projects\n\n* [csstree-validator](https://github.com/csstree/validator) – NPM package to validate CSS\n* [stylelint-csstree-validator](https://github.com/csstree/stylelint-validator) – plugin for stylelint to validate CSS\n* [Grunt plugin](https://github.com/sergejmueller/grunt-csstree-validator)\n* [Gulp plugin](https://github.com/csstree/gulp-csstree)\n* [Sublime plugin](https://github.com/csstree/SublimeLinter-contrib-csstree)\n* [VS Code plugin](https://github.com/csstree/vscode-plugin)\n* [Atom plugin](https://github.com/csstree/atom-plugin)\n\n## Usage\n\nInstall with npm:\n\n\n```\n> npm install css-tree\n```\n\nUse in your code:\n\n```js\nvar csstree = require('css-tree');\nvar ast = csstree.parse('.example { world: \"!\" }');\n\ncsstree.walk(ast, function(node) {\n    if (node.type === 'ClassSelector' && node.name === 'example') {\n        node.name = 'hello';\n    }\n});\n\nconsole.log(csstree.generate(ast));\n// .hello{world:\"!\"}\n```\n\n## Top level API\n\n![API map](https://cdn.rawgit.com/csstree/csstree/master/docs/api-map.svg)\n\n## License\n\nMIT\n",
    "licenseText": "Copyright (C) 2016 by Roman Dvornov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/css-tree/-/css-tree-1.0.0-alpha.28.tgz#8e8968190d886c9477bc8d61e96f61af3f7ffa7f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/css-tree/-/css-tree-1.0.0-alpha.28.tgz",
    "hash": "8e8968190d886c9477bc8d61e96f61af3f7ffa7f",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "8e8968190d886c9477bc8d61e96f61af3f7ffa7f"
}