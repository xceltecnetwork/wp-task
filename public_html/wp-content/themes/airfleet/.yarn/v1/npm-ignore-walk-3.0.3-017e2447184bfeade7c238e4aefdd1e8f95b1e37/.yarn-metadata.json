{
  "manifest": {
    "name": "ignore-walk",
    "version": "3.0.3",
    "description": "Nested/recursive `.gitignore`/`.npmignore` parsing and filtering.",
    "main": "index.js",
    "devDependencies": {
      "mkdirp": "^0.5.1",
      "mutate-fs": "^1.1.0",
      "rimraf": "^2.6.1",
      "tap": "^14.6.9"
    },
    "scripts": {
      "test": "tap",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --all; git push origin --tags"
    },
    "keywords": [
      "ignorefile",
      "ignore",
      "file",
      ".gitignore",
      ".npmignore",
      "glob"
    ],
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "http://blog.izs.me/"
    },
    "license": "ISC",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/isaacs/ignore-walk.git"
    },
    "files": [
      "index.js"
    ],
    "dependencies": {
      "minimatch": "^3.0.4"
    },
    "tap": {
      "jobs": 1
    },
    "_registry": "npm",
    "_loc": ".yarn/v1/npm-ignore-walk-3.0.3-017e2447184bfeade7c238e4aefdd1e8f95b1e37/package.json",
    "readmeFilename": "README.md",
    "readme": "# ignore-walk\n\n[![Build\nStatus](https://travis-ci.org/npm/ignore-walk.svg?branch=master)](https://travis-ci.org/npm/ignore-walk)\n\nNested/recursive `.gitignore`/`.npmignore` parsing and filtering.\n\nWalk a directory creating a list of entries, parsing any `.ignore`\nfiles met along the way to exclude files.\n\n## USAGE\n\n```javascript\nconst walk = require('ignore-walk')\n\n// All options are optional, defaults provided.\n\n// this function returns a promise, but you can also pass a cb\n// if you like that approach better.\nwalk({\n  path: '...', // root dir to start in. defaults to process.cwd()\n  ignoreFiles: [ '.gitignore' ], // list of filenames. defaults to ['.ignore']\n  includeEmpty: true|false, // true to include empty dirs, default false\n  follow: true|false // true to follow symlink dirs, default false\n}, callback)\n\n// to walk synchronously, do it this way:\nconst result = walk.sync({ path: '/wow/such/filepath' })\n```\n\nIf you want to get at the underlying classes, they're at `walk.Walker`\nand `walk.WalkerSync`.\n\n## OPTIONS\n\n* `path` The path to start in.  Defaults to `process.cwd()`\n\n* `ignoreFiles` Filenames to treat as ignore files.  The default is\n  `['.ignore']`.  (This is where you'd put `.gitignore` or\n  `.npmignore` or whatever.)  If multiple ignore files are in a\n  directory, then rules from each are applied in the order that the\n  files are listed.\n\n* `includeEmpty` Set to `true` to include empty directories, assuming\n  they are not excluded by any of the ignore rules.  If not set, then\n  this follows the standard `git` behavior of not including\n  directories that are empty.\n\n    Note: this will cause an empty directory to be included if it\n    would contain an included entry, even if it would have otherwise\n    been excluded itself.\n\n    For example, given the rules `*` (ignore everything) and `!/a/b/c`\n    (re-include the entry at `/a/b/c`), the directory `/a/b` will be\n    included if it is empty.\n\n* `follow`  Set to `true` to treat symbolically linked directories as\n  directories, recursing into them.  There is no handling for nested\n  symlinks, so `ELOOP` errors can occur in some cases when using this\n  option.  Defaults to `false`.\n",
    "licenseText": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ignore-walk/-/ignore-walk-3.0.3.tgz#017e2447184bfeade7c238e4aefdd1e8f95b1e37",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ignore-walk/-/ignore-walk-3.0.3.tgz",
    "hash": "017e2447184bfeade7c238e4aefdd1e8f95b1e37",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "017e2447184bfeade7c238e4aefdd1e8f95b1e37"
}